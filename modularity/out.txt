- [x]  脚本编程定义
- [x]  脚本实现机制

脚本：程序内部的程序

设计目的：分离内容 → 原则：避免硬编码 → 危险：难以编写、阅读、修改

运行机制：

- 难点
    - 加载： 虚拟机中的脚本加载器（script loader）
    - 运行
        - 运行在虚拟机上，而不是CPU
            - 同：
                - 都可以运行指令（虚拟机叫字节码（特定的汇编语言））
                - 都可以集成 （虚拟机与主程序集成（host application））
                    - 主程序提供API
            - 异
                - CPU是硬件，虚拟机是软件
    - 图解：

        ![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/510a5864-2fff-4bdc-8965-44de7eb78c9a/2020-08-29_14.03.32.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/510a5864-2fff-4bdc-8965-44de7eb78c9a/2020-08-29_14.03.32.png)

拓展：计算机程序设计

- 计算机科学的哲学体系
    1. 将问题和算法转化成高级语言代码
    2. 将高级语言代码转化成低级语言代码
        1. 编译器（compiler）的任务：将人容易理解的代码转化成机器码(opcodes[opreation code]) → 计算机是用于处理最简单和最基本的格式表示的东西的
        2. 汇编语言：助记符表示机器码
        3. 链接器（linker）：组合编译后的代码和其他代码生成一个可执行文件
        4. 操作系统的程序加载器（program loader）：将可执行文件中的代码加载到内存
    3. CPU执行低级语言代码来解决问题
- [x]  脚本系统的基本类型
    - [x]  面向过程的语言系统
    - [x]  面向对象的语言系统
    - [x]  基于命令的语言系统
    - [x]  动态链接的模块系统： 将脚本编译成机器码，运行时链接、载入(mods)
    - [x]  编译型代码:
    - [x]  解释性代码：直接处理高级语言代码，不转化成底层语言代码（在内存中一个预编译过程）
- [x]  了解现存脚本系统
    - [x]  Ruby
    - [x]  Lua
    - [x]  Java
- [ ]  脚本如何在虚拟机上运行